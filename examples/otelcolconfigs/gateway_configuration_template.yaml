receivers:
  jaeger:
    protocols:
      thrift_compact:
        endpoint: "0.0.0.0:6831"
      thrift_binary:
        endpoint: "0.0.0.0:6832"
      grpc:
        endpoint: "0.0.0.0:14250"
      thrift_http:
        endpoint: "0.0.0.0:14268"
  opencensus:
    endpoint: "0.0.0.0:55678"
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"
  zipkin:
    endpoint: "0.0.0.0:9411"
processors:
  ## The memory_limiter processor is used to prevent out of memory situations on the collector.
  memory_limiter:
    ## check_interval is the time between measurements of memory usage for the
    ## purposes of avoiding going over the limits. Defaults to zero, so no
    ## checks will be performed. Values below 1 second are not recommended since
    ## it can result in unnecessary CPU consumption.
    check_interval: 5s

    ## Maximum amount of memory, in MiB, targeted to be allocated by the process heap.
    ## Note that typically the total memory usage of process will be about 50MiB higher
    ## than this value.
    limit_mib: 1900

  ## The batch processor accepts spans and places them into batches grouped by node and resource
  batch:
    ## Number of spans after which a batch will be sent regardless of time
    send_batch_size: 256
    ## Never more than this many spans are being sent in a batch
    send_batch_max_size: 512
    ## Time duration after which a batch will be sent regardless of size
    timeout: 5s

extensions:
  health_check: {}
exporters:
  ## Load-balancing exporter
  ## https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/loadbalancingexporter/README.md
  loadbalancing:
    resolver:
      dns:
        ## Sampler host name
        hostname: SAMPLER_HOSTNAME
        ## GRPC Sampler host port
        port: 4317
  ## Following generates verbose logs with span content, useful to verify what
  ## metadata is being tagged. To enable, uncomment and add "logging" to exporters below.
  ## There are two levels that could be used: `debug` and `info` with the former
  ## being much more verbose and including (sampled) spans content
  # logging:
  #   loglevel: debug
service:
  extensions: [health_check]
  pipelines:
    traces:
      receivers: [jaeger, opencensus, otlp, zipkin]
      processors: [memory_limiter, batch]
      exporters: [loadbalancing]
  ## Following generates verbose logs with span content, useful to verify what
  ## metadata is being tagged. To enable, uncomment and add "telemetry.logs" to service below.
  ## There are two levels that could be used: `debug` and `info` with the former
  ## being much more verbose and including (sampled) spans content
  # telemetry:
  #  logs:
  #    level: debug
