name: Build Otelcol

on:
  workflow_call:
    inputs:
      arch_os:
        description: Architecture and OS in the form "{arch}_{os}". See GOARCH and GOOS for accepted values.
        default: linux_amd64
        type: string
      sumo_component_gomod_version:
        description: Package version for components hosted in this repo. Normally, this is the v0.0.0-00010101000000-000000000000 placeholder.
        type: string
        required: false
      fips:
        description: Build binary with FIPS support
        default: false
        type: boolean
      runs-on:
        default: ubuntu-20.04
        type: string
      save-cache:
        description: Save the module and build caches.
        default: false
        type: boolean
    secrets:
      apple_developer_certificate_p12_base64:
        required: false
      apple_developer_certificate_password:
        required: false
      app_store_connect_password:
        required: false
      microsoft_certificate:
        required: false
      microsoft_certificate_password:
        required: false
      microsoft_certificate_hash:
        required: false
      microsoft_certificate_name:
        required: false
      microsoft_description:
        required: false

defaults:
  run:
    shell: bash

env:
  GO_VERSION: "1.21.4"

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs-on }}
    env:
      OTELCOL_BINARY_EXTENSION: ${{ contains(inputs.arch_os, 'windows') && '.exe' || '' }}
      OTELCOL_FIPS_SUFFIX: ${{ inputs.fips && '-fips' || '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Determine if MacOS package should be signed
        if: runner.os == 'macOS'
        env:
          APPLE_DEVELOPER_CERTIFICATE: ${{ secrets.apple_developer_certificate_p12_base64 }}
        run: |
          if [ -n "${APPLE_DEVELOPER_CERTIFICATE}" ]; then
              echo "MACOS_SIGNING_ENABLED=true" >> $GITHUB_ENV
          fi

      - name: Setup go
        if: (! (contains(inputs.arch_os, 'windows') && inputs.fips))
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Setup go (Microsoft fork) and enable FIPS on Windows
        if: contains(inputs.arch_os, 'windows') && inputs.fips
        run: |
          curl -Lo go.zip https://aka.ms/golang/release/latest/go${{ env.GO_VERSION }}.windows-amd64.zip &&
          powershell -command "Expand-Archive go.zip D:\\a\\_work\\1\\s" &&
          echo "/d/a/_work/1/s/go/bin" >> $GITHUB_PATH &&
          powershell -command "Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy -Name Enabled -Value \$true"

      - name: Set Sumo component version in go.mod
        if: inputs.sumo_component_gomod_version != ''
        run: make prepare-tag TAG=${{ inputs.sumo_component_gomod_version }}

      - name: Get Go env values
        run: |
          echo "GOMODCACHE=$(go env GOMODCACHE)" >> "$GITHUB_ENV"
          echo "GOCACHE=$(go env GOCACHE)" >> "$GITHUB_ENV"
          echo "GOARCH=$(go env GOARCH)" >> "$GITHUB_ENV"
          echo "GOOS=$(go env GOOS)" >> "$GITHUB_ENV"
          echo "ARCH_OS=$(go env GOOS)_$(go env GOARCH)" >> $GITHUB_ENV

      - name: Get cache key
        id: get-cache-key
        run: |
          echo "cache-key=go-build-${{ env.GO_VERSION }}${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}-${{ hashFiles('pkg/**/go.sum', 'otelcolbuilder/.otelcol-builder.yaml') }}" >> $GITHUB_OUTPUT
          echo "restore-keys=go-build-${{ env.GO_VERSION }}${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}-" >> $GITHUB_OUTPUT
          echo "toolchain-cache-key=toolchain-${{inputs.arch_os}}-${{ hashFiles('otelcolbuilder/build-fips/config.mak', 'otelcolbuilder/build-fips/Makefile') }}" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.GOMODCACHE }}/cache
            ${{ env.GOCACHE }}
          key: ${{ steps.get-cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ steps.get-cache-key.outputs.restore-keys }}

      - name: Set default BUILDER_BIN_PATH
        run: echo "BUILDER_BIN_PATH=${HOME}/bin" >> $GITHUB_ENV

      - name: Add opentelemetry-collector-builder installation dir to PATH
        run: echo "$BUILDER_BIN_PATH" >> $GITHUB_PATH

      - name: Install opentelemetry-collector-builder
        run: make install-builder
        working-directory: ./otelcolbuilder

      - name: Build
        if: '! inputs.fips'
        run: make otelcol-sumo-${{inputs.arch_os}}
        working-directory: ./otelcolbuilder

      - uses: actions/cache/restore@v4
        id: restore-toolchain-cache
        if: inputs.fips && contains(inputs.arch_os, 'linux')
        with:
          path: |
            /opt/toolchain
          key: ${{ steps.get-cache-key.outputs.toolchain-cache-key }}

      - name: Rebuild Toolchains
        id: rebuild-toolchain
        if: ${{ steps.restore-toolchain-cache.outcome == 'success' && steps.restore-toolchain-cache.outputs.cache-hit != 'true' }}
        run: make toolchain-${{ inputs.arch_os }} OUTPUT=/opt/toolchain -j3
        working-directory: ./otelcolbuilder

      - name: Build (FIPS)
        if: inputs.fips && contains(inputs.arch_os, 'linux')
        run: |
          CC=$(find /opt/toolchain/bin -type f -name "*-linux-musl-gcc")
          test "$CC"
          echo "Using toolchain: $CC"
          make otelcol-sumo-${{inputs.arch_os}} \
            FIPS_SUFFIX="-fips" \
            CGO_ENABLED="1" \
            CC="$CC" \
            EXTRA_LDFLAGS="-linkmode external -extldflags '-static'"
        working-directory: ./otelcolbuilder

      - name: Build (FIPS)
        if: inputs.fips && ! contains(inputs.arch_os, 'linux')
        run: make otelcol-sumo-${{inputs.arch_os}} FIPS_SUFFIX="-fips" CGO_ENABLED=1
        working-directory: ./otelcolbuilder

      - name: Set binary name
        id: set-binary-name
        run: echo "binary_name=otelcol-sumo${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}${OTELCOL_BINARY_EXTENSION}" >> $GITHUB_OUTPUT

      - name: Show BoringSSL symbols
        if: inputs.fips && contains(inputs.arch_os, 'linux')
        working-directory: ./otelcolbuilder/cmd
        run: |
          go tool nm ${{ steps.set-binary-name.outputs.binary_name }} | \
          grep "_Cfunc__goboringcrypto_"

      - name: Show Microsoft Cryptography Next-Generation symbols
        if: inputs.fips && contains(inputs.arch_os, 'windows')
        working-directory: ./otelcolbuilder/cmd
        run: |
          go tool nm ${{ steps.set-binary-name.outputs.binary_name }} | \
          grep "vendor/github.com/microsoft/go-crypto-winnative/internal/bcrypt.GetFipsAlgorithmMode"

      # TODO: Go back to using Apple-Actions/import-codesign-certs once https://github.com/Apple-Actions/import-codesign-certs/pull/58 is merged
      - name: Import macOS Code-Signing Certificates
        if: ${{ runner.os == 'macOS' && env.MACOS_SIGNING_ENABLED == 'true' }}
        run: |
          export p12_filepath=$(mktemp)
          echo '${{ secrets.apple_developer_certificate_p12_base64 }}' | base64 --decode >${p12_filepath}
          /usr/bin/security create-keychain -p ${{ secrets.apple_developer_certificate_password }} signing_temp.keychain
          /usr/bin/security set-keychain-settings -lut 21600 signing_temp.keychain
          /usr/bin/security unlock-keychain -p ${{ secrets.apple_developer_certificate_password }} signing_temp.keychain
          /usr/bin/security import ${p12_filepath} -k signing_temp.keychain -f pkcs12 -A -T /usr/bin/codesign -T /usr/bin/security -P ${{ secrets.apple_developer_certificate_password }}
          /usr/bin/security set-key-partition-list -S apple-tool:,apple: -k ${{ secrets.apple_developer_certificate_password }} signing_temp.keychain
          /usr/bin/security list-keychains -d user -s signing_temp.keychain login.keychain

      - name: Sign the mac binaries
        if: ${{ runner.os == 'macOS' && env.MACOS_SIGNING_ENABLED == 'true' }}
        env:
          AC_PASSWORD: ${{ secrets.app_store_connect_password }}
        working-directory: ./otelcolbuilder/
        run: make ${{ inputs.arch_os }}-sign

      - name: Sign Windows binary
        if: runner.os == 'Windows'
        uses: skymatic/code-sign-action@v3
        with:
          certificate: '${{ secrets.microsoft_certificate }}'
          password: '${{ secrets.microsoft_certificate_password }}'
          certificatesha1: '${{ secrets.microsoft_certificate_hash }}'
          certificatename: '${{ secrets.microsoft_certificate_name }}'
          description: '${{ secrets.microsoft_description }}'
          folder: ./otelcolbuilder/cmd

      - name: Test binary
        if: inputs.arch_os == env.ARCH_OS
        working-directory: ./otelcolbuilder/cmd
        run: |
          ./${{ steps.set-binary-name.outputs.binary_name }} help
          ./${{ steps.set-binary-name.outputs.binary_name }} components
          ./${{ steps.set-binary-name.outputs.binary_name }} completion bash

      - name: Store binary as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-binary-name.outputs.binary_name }}
          path: ./otelcolbuilder/cmd/${{ steps.set-binary-name.outputs.binary_name }}
          if-no-files-found: error

      - name: Store Mac .dmg as action artifact
        uses: actions/upload-artifact@v4
        if: runner.os == 'macOS' && env.MACOS_SIGNING_ENABLED == 'true'
        with:
          name: ${{ steps.set-binary-name.outputs.binary_name }}.dmg
          path: ./otelcolbuilder/cmd/${{ steps.set-binary-name.outputs.binary_name }}.dmg
          if-no-files-found: error

      - uses: actions/cache/save@v4
        if: ${{ steps.rebuild-toolchain.outcome == 'success' }}
        with:
          path: |
            /opt/toolchain
          key: ${{ steps.get-cache-key.outputs.toolchain-cache-key }}

      - uses: actions/cache/save@v4
        if: inputs.save-cache
        with:
          path: |
            ${{ env.GOMODCACHE }}/cache
            ${{ env.GOCACHE }}
          key: ${{ steps.get-cache-key.outputs.cache-key }}
