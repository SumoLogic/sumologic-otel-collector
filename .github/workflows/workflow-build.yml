name: Build Otelcol

on:
  workflow_call:
    inputs:
      arch_os:
        description: Architecture and OS in the form "{arch}_{os}". See GOARCH and GOOS for accepted values.
        default: linux_amd64
        type: string
      fips:
        description: Build binary with FIPS support
        default: false
        type: boolean
      runs-on:
        default: ubuntu-20.04
        type: string
      only-if-changed:
        description: Run only if relevant files changed.
        default: false
        type: boolean
      save-cache:
        description: Save the module and build caches.
        default: false
        type: boolean

defaults:
  run:
    shell: bash

env:
  GO_VERSION: "1.20.5"

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs-on }}
    env:
      OTELCOL_BINARY_EXTENSION: ${{ contains(inputs.arch_os, 'windows') && '.exe' || '' }}
      OTELCOL_FIPS_SUFFIX: ${{ inputs.fips && '-fips' || '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if build related files changed
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            **/go.mod
            **/go.sum
            **/*.go
            **/*.yaml
            **/*.yml
            **/Makefile
            **/Makefile.common
            **/Dockerfile*

      - name: Fetch current branch
        if: steps.changed-files.outputs.any_changed == 'true'
        run: ./ci/fetch_current_branch.sh

      - name: Setup go
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Get Go env values
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          echo "GOMODCACHE=$(go env GOMODCACHE)" >> "$GITHUB_ENV"
          echo "GOCACHE=$(go env GOCACHE)" >> "$GITHUB_ENV"
          echo "GOARCH=$(go env GOARCH)" >> "$GITHUB_ENV"
          echo "GOOS=$(go env GOOS)" >> "$GITHUB_ENV"
          echo "ARCH_OS=$(go env GOOS)_$(go env GOARCH)" >> $GITHUB_ENV

      - name: Get cache key
        id: get-cache-key
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          echo "cache-key=go-build-${{ env.GO_VERSION }}${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}-${{ hashFiles('pkg/**/go.sum', 'otelcolbuilder/.otelcol-builder.yaml') }}" >> $GITHUB_OUTPUT
          echo "restore-keys=go-build-${{ env.GO_VERSION }}${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}-" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v3
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        with:
          path: |
            ${{ env.GOMODCACHE }}/cache
            ${{ env.GOCACHE }}
          key: ${{ steps.get-cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ steps.get-cache-key.outputs.restore-keys }}

      - name: Set default BUILDER_BIN_PATH
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: echo "BUILDER_BIN_PATH=${HOME}/bin" >> $GITHUB_ENV

      - name: Add opentelemetry-collector-builder installation dir to PATH
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: echo "$BUILDER_BIN_PATH" >> $GITHUB_PATH

      - name: Install opentelemetry-collector-builder
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: make install-builder
        working-directory: ./otelcolbuilder

      - name: Build
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: make otelcol-sumo-${{inputs.arch_os}}${{ inputs.fips && ' FIPS_SUFFIX="$OTELCOL_FIPS_SUFFIX" CGO_ENABLED=1' || '' }}
        working-directory: ./otelcolbuilder

      - name: Set binary name
        id: set-binary-name
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        run: echo "binary_name=otelcol-sumo${OTELCOL_FIPS_SUFFIX}-${{inputs.arch_os}}${OTELCOL_BINARY_EXTENSION}" >> $GITHUB_OUTPUT

      - name: Show BoringSSL symbols
        if: ${{ inputs.fips && (! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true') }}
        working-directory: ./otelcolbuilder/cmd
        run: |
          go tool nm ${{ steps.set-binary-name.outputs.binary_name }} | \
          grep "_Cfunc__goboringcrypto_"

      - name: Test binary
        if: ${{ (inputs.arch_os == env.ARCH_OS) && (! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true') }}
        working-directory: ./otelcolbuilder/cmd
        run: |
          ./${{ steps.set-binary-name.outputs.binary_name }} help
          ./${{ steps.set-binary-name.outputs.binary_name }} components
          ./${{ steps.set-binary-name.outputs.binary_name }} completion bash

      - name: Store binary as action artifact
        if: ${{ ! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.set-binary-name.outputs.binary_name }}
          path: ./otelcolbuilder/cmd/${{ steps.set-binary-name.outputs.binary_name }}
          if-no-files-found: error

      - uses: actions/cache/save@v3
        if: ${{ inputs.save-cache && (! inputs.only-if-changed || steps.changed-files.outputs.any_changed == 'true') }}
        with:
          path: |
            ${{ env.GOMODCACHE }}/cache
            ${{ env.GOCACHE }}
          key: ${{ steps.get-cache-key.outputs.cache-key }}
