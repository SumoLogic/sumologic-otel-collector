name: PRs checks

on:
  pull_request:
    branches:
      - main
      - 'release-v[0-9]+.[0-9]+'

jobs:
  markdownlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Install markdownlint
        run: gem install mdl
      - name: Markdownlint check
        run: make markdownlint

  yamllint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Install yamllint
        run: pip install yamllint
      - name: yamllint
        run: make yamllint

  test:
    name: Test
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [ '1.16.4' ]
        arch_os: [ 'darwin_amd64', 'linux_amd64', 'linux_arm64']
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{matrix.arch_os}}-go-pkg-${{matrix.go}}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-pkg-${{matrix.go}}-
      - name: Run tests
        run: make gotest

  lint:
    name: Lint (golangci-lint)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [ '1.16.4' ]
        arch_os: [ 'linux_amd64' ]
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{matrix.arch_os}}-go-lint-${{matrix.go}}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-lint-${{matrix.go}}-
      - name: Install golangci-lint
        run: make install-golangci-lint
      - name: Run golangci-lint
        run: make golint

  build:
    name: Build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [ '1.16.4' ]
        arch_os: [ 'darwin_amd64', 'linux_amd64', 'linux_arm64']
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{matrix.arch_os}}-go-${{matrix.go}}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-${{matrix.go}}-
      - name: Install opentelemetry-collector-builder
        run: make install
        working-directory: ./otelcolbuilder
      - name: Build
        run: make otelcol-sumo-${{matrix.arch_os}}
        working-directory: ./otelcolbuilder
      - name: Show included modules
        working-directory: ./otelcolbuilder/cmd
        run: |
          go version -m otelcol-sumo-${{matrix.arch_os}} | \
          grep -E "/(receiver|exporter|processor|extension)/"

  build-container-images:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Extract tag
        id: extract_tag
        run: echo "::set-output name=tag::$(git rev-parse HEAD)"

      - name: Print tag
        run: echo "Running release build for ${{ steps.extract_tag.outputs.tag }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0

      - name: Show Buildx platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Open Source ECR
        run: make login
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

      - name: Build and push image to Open Source ECR
        run: make build-push-multiplatform-dev BUILD_TAG=${{ steps.extract_tag.outputs.tag }}