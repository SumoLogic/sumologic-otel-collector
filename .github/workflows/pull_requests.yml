name: PRs checks

on:
  pull_request:
    branches:
      - '**'

jobs:

  markdownlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Install markdownlint
        run: gem install mdl
      - name: Markdownlint check
        run: make markdownlint

  yamllint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Install yamllint
        run: pip install yamllint
      - name: yamllint
        run: make yamllint

  markdown-link-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.markdown_link_check.json'

  md-links-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Lint markdown links
        run: |
          make markdown-links-lint

  plugins-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
      - name: Check plugins in README and builder config
        run: ./ci/plugins_check.sh

  pre-commit-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  check-uniform-dependencies:
    name: Check uniform dependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Check uniform dependencies
        run: make check-uniform-dependencies

  test:
    name: Test
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - arch_os: linux_amd64
            runs_on: ubuntu-20.04
          - arch_os: darwin_amd64
            runs_on: macos-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Check if test related files changed
        id: changed-files
        uses: tj-actions/changed-files@v10
        with:
          files: |
            pkg/
            Makefile

      - name: Setup go
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /Users/runner/go/pkg/mod
            /Users/runner/Library/Caches/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - name: Run tests
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make gotest

  lint:
    name: Lint (golangci-lint)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch_os: [ 'linux_amd64' ]
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Check if files changed that need linting
        id: changed-files
        uses: tj-actions/changed-files@v10
        with:
          files: |
            otelcolbuilder/cmd/
            pkg/

      - name: Setup go
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - name: Install golangci-lint
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make install-golangci-lint

      - name: Run golangci-lint
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make golint

  build:
    name: Build
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - arch_os: linux_amd64
            runs_on: ubuntu-20.04
          - arch_os: linux_arm64
            runs_on: ubuntu-20.04
          - arch_os: darwin_amd64
            runs_on: macos-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Check if build related files changed
        id: changed-files
        uses: tj-actions/changed-files@v10
        with:
          files: |
            otelcolbuilder/.otelcol-builder.yaml
            otelcolbuilder/Makefile
            otelcolbuilder/cmd/
            pkg/
            Dockerfile.*
            Makefile

      - name: Setup go
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'

      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /Users/runner/go/pkg/mod
            /Users/runner/Library/Caches/go-build
          key: ${{matrix.arch_os}}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.arch_os}}-go-

      - name: Install opentelemetry-collector-builder
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make install
        working-directory: ./otelcolbuilder

      - name: Build
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make otelcol-sumo-${{matrix.arch_os}}
        working-directory: ./otelcolbuilder

      # TODO:
      # Move that out to a separate job and run on a corresponding's OS runner.
      # - name: Run the binary
      #   run: ./otelcol-sumo-${{matrix.arch_os}} --version
      #   working-directory: ./otelcolbuilder/cmd/

      - name: Show included modules
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./otelcolbuilder/cmd
        run: |
          go version -m otelcol-sumo-${{matrix.arch_os}} | \
          grep -E "/(receiver|exporter|processor|extension)/"

      - name: Store binary as action artifact
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: otelcol-sumo-${{matrix.arch_os}}
          path: ./otelcolbuilder/cmd/otelcol-sumo-${{matrix.arch_os}}
          if-no-files-found: error

  build-and-test-container-images:
    name: Build container
    runs-on: ubuntu-20.04
    needs:
      - build
    strategy:
      matrix:
        arch_os: [ 'linux_amd64', 'linux_arm64']
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Check if build related files changed
        id: changed-files
        uses: tj-actions/changed-files@v10
        with:
          files: |
            otelcolbuilder/.otelcol-builder.yaml
            otelcolbuilder/Makefile
            otelcolbuilder/cmd/
            pkg/
            Dockerfile.*
            Makefile

      - name: Set up QEMU
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Buildx
        if: steps.changed-files.outputs.any_changed == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Show Buildx platforms
        if: steps.changed-files.outputs.any_changed == 'true'
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Download binary action artifact from build phase
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/download-artifact@v2
        with:
          name: otelcol-sumo-${{matrix.arch_os}}
          path: artifacts/

      - name: Build the container image
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cp artifacts/otelcol-sumo-${{matrix.arch_os}} otelcol-sumo
          make build-container-multiplatform \
            PLATFORM=${{ matrix.arch_os }}

      - name: Test built image
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make test-built-image
