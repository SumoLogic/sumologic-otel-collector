name: Releases

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

      - "v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-alpha.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-beta.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-sumo-[0-9]+-rc.[0-9]+"

defaults:
  run:
    shell: bash

env:
  GO_VERSION: "1.22.6"

jobs:
  get-version:
    name: Get application version for this revision
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version
        id: get-version
        run: |
          echo "version=$(echo ${GITHUB_REF#refs/tags/v})" > $GITHUB_OUTPUT
      - name: Print version
        run: echo ::notice title=Version::${{ steps.get-version.outputs.version }}

  build:
    name: Build
    uses: ./.github/workflows/workflow-build.yml
    needs: [get-version]
    strategy:
      matrix:
        include:
          - arch_os: linux_amd64
            runs-on: ubuntu-20.04
          - arch_os: linux_amd64
            runs-on: ubuntu-20.04
            fips: true
          - arch_os: linux_arm64
            runs-on: ubuntu-20.04
          - arch_os: linux_arm64
            runs-on: ubuntu-20.04
            fips: true
          - arch_os: darwin_amd64
            runs-on: macos-15
          - arch_os: darwin_arm64
            runs-on: macos-15
          - arch_os: windows_amd64
            runs-on: windows-2022
          - arch_os: windows_amd64
            runs-on: windows-2022
            fips: true
    with:
      arch_os: ${{ matrix.arch_os }}
      runs-on: ${{ matrix.runs-on }}
      fips: ${{ matrix.fips == true }}
      sumo_component_gomod_version: "v${{ needs.get-version.outputs.version }}"
    secrets:
      apple_developer_certificate_p12_base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
      apple_developer_certificate_password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      app_store_connect_password: ${{ secrets.AC_PASSWORD }}
      microsoft_certificate: ${{ secrets.MICROSOFT_CERTIFICATE }}
      microsoft_certificate_password: ${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}
      microsoft_certificate_hash: ${{ secrets.MICROSOFT_CERTHASH }}
      microsoft_certificate_name: ${{ secrets.MICROSOFT_CERTNAME }}
      microsoft_description: ${{ secrets.MICROSOFT_DESCRIPTION }}

  build-container-images:
    name: Build container
    runs-on: ubuntu-20.04
    needs:
      - build
      - get-version
    strategy:
      matrix:
        arch_os: ["linux_amd64", "linux_arm64"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Show Buildx platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Open Source ECR
        run: make login
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Docker Hub
        run: |
          docker login \
            --username ${{ secrets.DOCKERHUB_LOGIN }} \
            --password ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Download binary action artifact from build phase
        uses: actions/download-artifact@v4
        with:
          name: otelcol-sumo-${{matrix.arch_os}}
          path: artifacts/

      - name: Download binary action artifact from build phase (FIPS)
        uses: actions/download-artifact@v4
        with:
          name: otelcol-sumo-fips-${{matrix.arch_os}}
          path: artifacts/

      - name: Build and push FIPS image to Open Source ECR
        run: |
          cp artifacts/otelcol-sumo-fips-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-multiplatform \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            BUILD_TYPE_SUFFIX="-fips"

      - name: Build and push FIPS image to DockerHub
        run: |
          cp artifacts/otelcol-sumo-fips-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-multiplatform \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-fips"

      - name: Build and push UBI-based FIPS image to Open Source ECR
        run: |
          cp artifacts/otelcol-sumo-fips-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-ubi \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            BUILD_TYPE_SUFFIX="-ubi-fips"

      - name: Build and push UBI-based FIPS image to DockerHub
        run: |
          cp artifacts/otelcol-sumo-fips-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-ubi \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-ubi-fips"

      - name: Build and push image to Open Source ECR
        run: |
          cp artifacts/otelcol-sumo-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-multiplatform \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }}

      - name: Build and push image to DockerHub
        run: |
          cp artifacts/otelcol-sumo-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-multiplatform \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            REPO_URL=sumologic/sumologic-otel-collector

      - name: Build and push UBI-based image to Open Source ECR
        run: |
          cp artifacts/otelcol-sumo-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-ubi \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            BUILD_TYPE_SUFFIX="-ubi"

      - name: Build and push UBI-based image to DockerHub
        run: |
          cp artifacts/otelcol-sumo-${{matrix.arch_os}} otelcol-sumo
          make build-push-container-ubi \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORM=${{ matrix.arch_os }} \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-ubi"

  push-docker-manifest:
    name: Push joint container manifest
    runs-on: ubuntu-20.04
    needs:
      # Require darwin build to succeed to prevent pushing container images
      # when darwin build fails.
      - build
      - build-container-images
      - get-version
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Show Buildx platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Open Source ECR
        run: make login
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Docker Hub
        run: |
          docker login \
            --username ${{ secrets.DOCKERHUB_LOGIN }} \
            --password ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push joint FIPS container manifest for all platforms to Open Source ECR
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64" \
            BUILD_TYPE_SUFFIX="-fips"

      - name: Push joint FIPS container manifest for all platforms to DockerHub
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64" \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-fips"

      - name: Push joint UBI-based FIPS container manifest for all platforms to Open Source ECR
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64" \
            BUILD_TYPE_SUFFIX="-ubi-fips"

      - name: Push joint UBI-based FIPS container manifest for all platforms to DockerHub
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64" \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-ubi-fips"

      - name: Push joint container manifest for all platforms to Open Source ECR
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64"

      - name: Push joint container manifest for all platforms to DockerHub
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64" \
            REPO_URL=sumologic/sumologic-otel-collector

      - name: Push joint UBI-based container manifest for all platforms to Open Source ECR
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64" \
            BUILD_TYPE_SUFFIX="-ubi"

      - name: Push joint UBI-based container manifest for all platforms to DockerHub
        run: |
          make push-container-manifest \
            BUILD_TAG=${{ needs.get-version.outputs.version }} \
            PLATFORMS="linux/amd64 linux/arm64" \
            REPO_URL=sumologic/sumologic-otel-collector \
            BUILD_TYPE_SUFFIX="-ubi"

  package-msi:
    name: Package MSI
    runs-on: windows-2019
    needs:
      - build
    strategy:
      matrix:
        include:
          - arch_os: windows_amd64
            platform: x64
            fips: false
          - arch_os: windows_amd64
            platform: x64
            fips: true
    steps:
      - uses: actions/checkout@v4

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Fetch binary artifact for ${{ matrix.arch_os }} ${{ matrix.fips && '(FIPS)' || '' }}
        uses: actions/download-artifact@v4
        with:
          name: otelcol-sumo${{ matrix.fips && '-fips' || '' }}-windows_amd64.exe
          path: ./otelcolbuilder/cmd

      - name: Rename FIPS binary artifact for ${{ matrix.arch_os }}
        if: matrix.fips
        working-directory: ./otelcolbuilder/cmd
        run: mv otelcol-sumo${{ matrix.fips && '-fips' || '' }}-windows_amd64.exe otelcol-sumo-${{ matrix.arch_os }}.exe

      - name: Set PRODUCT_VERSION
        run: echo "PRODUCT_VERSION=$(./ci/get_version.sh productversion)" >> $GITHUB_ENV

      - name: Build MSI for ${{ matrix.arch_os }}
        working-directory: ./packaging/msi/wix
        run: msbuild.exe -p:Configuration=Release -p:Platform=${{ matrix.platform }} -p:ProductVersion=$PRODUCT_VERSION -p:FIPSEnabled=${{ matrix.fips }} -Restore

      - name: Sign MSI
        uses: skymatic/code-sign-action@v3
        with:
          certificate: "${{ secrets.MICROSOFT_CERTIFICATE }}"
          password: "${{ secrets.MICROSOFT_CERTIFICATE_PASSWORD }}"
          certificatesha1: "${{ secrets.MICROSOFT_CERTHASH }}"
          certificatename: "${{ secrets.MICROSOFT_CERTNAME }}"
          description: "${{ secrets.MICROSOFT_DESCRIPTION }}"
          folder: ./packaging/msi/wix/bin/${{ matrix.platform }}/en-US

      - name: Store MSI as action artifact for ${{ matrix.arch_os }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch_os }}${{ matrix.fips && '_fips' || '' }}_msi
          path: ./packaging/msi/wix/bin/${{ matrix.platform }}/en-US/*.msi
          if-no-files-found: error

  # Store the install script from the packaging repository as a release artifact.
  # Originally, this script was stored in this repository, and the official download url pointed
  # to the most recent release here. The script has since been moved to the packaging repository.
  # It is kept here for backwards compatibility. Once the download count for this artifact
  # reaches 0 for new releases, this can be removed.
  install-script:
    name: Store install script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: SumoLogic/sumologic-otel-collector-packaging

      - name: Store Linux install script as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: install.sh
          path: ./install-script/install.sh
          if-no-files-found: error

      - name: Store Windows install script as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: install.ps1
          path: ./install-script/install.ps1
          if-no-files-found: error

  config-management-assets:
    name: Store Chef cookbook, Puppet module, and Ansible playbook
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Fetch current branch
        run: ./ci/fetch_current_branch.sh

      - name: Archive Chef cookbook
        run: tar -cvf ./examples/chef/chef-cookbook.tar.gz -C ./examples/chef sumologic-otel-collector/

      - name: Archive Puppet module
        run: tar -cvf ./examples/puppet/puppet-module.tar.gz -C ./examples/puppet/modules install_otel_collector/

      - name: Archive Ansible playbook
        run: tar -cvf ./examples/ansible-playbook.tar.gz -C ./examples ansible/

      # Users can download it via the "latest/download" redirect.
      - name: Store Chef cookbook archive as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: chef-cookbook.tar.gz
          path: ./examples/chef/chef-cookbook.tar.gz
          if-no-files-found: error

      - name: Store Puppet module archive as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: puppet-module.tar.gz
          path: ./examples/puppet/puppet-module.tar.gz
          if-no-files-found: error

      - name: Store Ansible playbook archive as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-playbook.tar.gz
          path: ./examples/ansible-playbook.tar.gz
          if-no-files-found: error

  create-release:
    name: Create Github release
    runs-on: ubuntu-20.04
    needs:
      - build
      - build-container-images
      - push-docker-manifest
      - package-msi
      - get-version
    steps:
      - name: Download all binaries stored as artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true
      - name: Add version to binary names
        working-directory: artifacts/
        run: |
          find . -type f -name 'otelcol-sumo*' \
            | grep -v '\.msi' \
            | sed 's/^\.\///' \
            | while read -r file; do
              new_name=$(echo "$file" | sed 's/otelcol-sumo/otelcol-sumo-${{ needs.get-version.outputs.version }}/g')
              mv "$file" "$new_name"
          done
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false

          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true

          body: |
            ## v${{ needs.get-version.outputs.version }}

            **TODO**

            ### Upstream releases
            ** TODO: Add upstream versions in the links below**
            Core: https://github.com/open-telemetry/opentelemetry-collector/releases/tag/v
            Contrib: https://github.com/open-telemetry/opentelemetry-collector-contrib/releases/tag/v

            ### Changelog

            **TODO**

            ### Container images:

            ```
            docker pull public.ecr.aws/sumologic/sumologic-otel-collector:${{ needs.get-version.outputs.version }}
            ```

          artifacts: "artifacts/*"
          artifactErrorsFailBuild: true
          replacesArtifacts: true
